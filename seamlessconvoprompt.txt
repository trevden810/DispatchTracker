# DispatchTracker - Seamless Context Handoff

## Current Project Status (October 1, 2025)

**Production URL**: https://www.pepmovetracker.info/cards  
**Deployment**: Vercel via dispatch-tracker-git-master-trevor-bates-projects.vercel.app  
**Status**: Functional with route-based correlation implemented

## Recent Changes

### Route-Based Correlation (Implemented)
- Replaced geographic correlation with route-based matching (geocoding was mock/non-functional)
- Successfully matching 21 vehicles to jobs using FileMaker route IDs
- Location: `/lib/route-correlation.ts`
- Tracking API updated: `/app/api/tracking/route.ts`

### FileMaker Integration (Validated)
- Authentication: Working with credentials in .env files
- Database: PEP2_1, Layout: jobs_api
- Enhanced fields accessible: Customer_C1, address_C1, _kf_route_id, _kf_driver_id
- Test suite: `/tests/test-filemaker-api.js`

## Known Issues

### Issue #1: Over-Matching Routes
**Problem**: Multiple vehicles match same jobs due to substring matching
- Vehicle "TRUCK 81" contains "1" → matches route "1"
- Vehicle "TRUCK 85" contains "5" → matches route "5"
- Results in duplicate job assignments

**Impact**: Dashboard shows correct counts but same jobs appear on multiple vehicles

**Solution Options**:
1. Implement stricter matching (exact route designation in vehicle name)
2. Add vehicle-to-route mapping table in FileMaker
3. Use external IDs from Samsara for precise matching
4. Implement one-to-one constraint (first match wins)

**Priority**: Medium - System functional but needs refinement

### Issue #2: Geocoding Not Implemented
**Problem**: Geographic proximity detection not working
- Current geocoding in `/lib/gps-utils.ts` is mock implementation
- Only recognizes 4 hardcoded cities
- Real job addresses return null

**Impact**: Cannot detect when vehicles are physically at job sites

**Solution**: Implement Google Maps Geocoding API
- File created: `/lib/gps-utils-geocoding.ts` (ready to integrate)
- Requires: GOOGLE_MAPS_API_KEY in environment
- Cost: $200/month free tier (~40,000 addresses)

**Priority**: High - Core feature for "on location" detection

## Next Development: Proximity-Based Indicators

### Feature Request
Implement GPS proximity to job addresses as visual indicators for job site presence.

### Requirements
**Distance Thresholds**:
- **Green** (On Site): ≤ 2 miles from job address
- **Yellow** (Nearby): 2-5 miles from job address  
- **Red** (Far): > 5 miles from job address

**Implementation Steps**:
1. Integrate Google Maps Geocoding API (use `/lib/gps-utils-geocoding.ts`)
2. Geocode job addresses on first load (cache results)
3. Calculate distance: vehicle GPS → job coordinates (use existing `calculateDistance()`)
4. Add proximity indicator to vehicle cards UI
5. Update location status display with distance and color coding

**Files to Modify**:
- `/lib/gps-utils.ts` - Add proximity thresholds
- `/app/api/tracking/route.ts` - Include distance calculation
- `/components/VehicleCard.tsx` - Add proximity visual indicator
- `/lib/types.ts` - Add proximity status to data types

**Business Value**:
- Real-time visibility of truck locations vs job sites
- Automated "arrived on site" detection
- Better dispatch decision making
- Accurate arrival time tracking

## FileMaker Data Structure

### Job Assignment Fields
- `*kf*trucks_id`: Mostly null/undefined
- `_kf_route_id`: Primary assignment field (values: "1", "2", "3", "5", "WH")
- `_kf_driver_id`: Driver names (sometimes populated)
- `time_arival`: Arrival timestamp
- `time_complete`: Completion timestamp
- `address_C1`: Job address for geocoding

### Current Assignment Pattern
- **4/20** today's jobs have route assignments
- Routes: 1, 3, 5 are active
- No truck ID assignments in recent jobs
- Route-based correlation is primary matching method

## API Configuration

### Samsara Fleet API
```
Token: samsara_api_VXKWxiewMU9DvBoEH1ttkHmHHOT1q8
Endpoint: /fleet/vehicles/stats
Types: gps,engineStates,fuelPercents,obdOdometerMeters
Vehicles: 50 tracked (names: "Truck 96", "TRUCK 81", "V7", etc.)
```

### FileMaker Data API
```
Base URL: https://modd.mainspringhost.com
Database: PEP2_1
Layout: jobs_api
Username: trevor_api
Password: XcScS2yRoTtMo7
Total Jobs: 544,175+
```

## Test Suite

### Available Tests
- `tests/test-filemaker-api.js` - FileMaker auth & queries
- `tests/test-route-correlation.js` - Route matching validation
- `tests/debug-vehicles.js` - Vehicle data structure
- `tests/debug-jobs.js` - Job assignment analysis
- `tests/test-today-jobs.js` - Today's job assignments

### Running Tests
```bash
cd C:\Projects\DispatchTracker
npm run dev  # Terminal 1
node tests/test-route-correlation.js  # Terminal 2
```

## Project Structure
```
C:\Projects\DispatchTracker/
├── app/
│   ├── api/
│   │   ├── vehicles/route.ts         # Samsara integration
│   │   ├── jobs/route.ts             # FileMaker integration
│   │   ├── tracking/route.ts         # Route correlation
│   │   └── healthstatus/             # Vehicle diagnostics
│   ├── cards/page.tsx                # Main dashboard
│   └── health/                       # FleetHealth monitor
├── lib/
│   ├── route-correlation.ts          # Route matching logic
│   ├── gps-utils.ts                  # Distance calculations (mock geocoding)
│   ├── gps-utils-geocoding.ts        # Real geocoding (ready to integrate)
│   └── types.ts                      # TypeScript definitions
├── components/
│   └── VehicleCard.tsx               # Vehicle display cards
└── tests/                            # Test suite
```

## Development Workflow

### Starting Development
```bash
cd C:\Projects\DispatchTracker
npm run dev
```

### Testing Changes
1. Update code
2. Run relevant test from `/tests/`
3. Check dashboard at http://localhost:3002/cards
4. Deploy via `npm run deploy` (Vercel auto-deploy on git push)

### Environment Variables
Local: `.env.local`  
Production: Vercel dashboard (already configured)

## Handoff Context for New Conversation

"Working on DispatchTracker at C:\Projects\DispatchTracker - fleet management app for PepMove. Just implemented route-based correlation (21 vehicles matched to jobs). Known issue: over-matching due to substring matching (TRUCK 81 matches route '1'). Need to implement proximity-based indicators: green ≤2mi, yellow 2-5mi, red >5mi from job address. Requires integrating Google Maps Geocoding API (template ready at /lib/gps-utils-geocoding.ts). Production live at https://www.pepmovetracker.info/cards."

## Key Decisions Made
- **Geocoding**: Deferred Google Maps integration, using route-based correlation
- **Matching**: Route IDs primary (truck IDs mostly null in FileMaker)
- **Job Query**: Today's jobs (100 limit) for better assignment data
- **Correlation**: First-match algorithm, no deduplication yet

## Success Metrics
- ✅ 50 vehicles tracked with diagnostics
- ✅ FileMaker API operational (544K+ jobs)
- ✅ Route correlation working (21 matches)
- ⏳ Proximity indicators (pending geocoding)
- ⏳ One-to-one job assignment (pending refinement)
